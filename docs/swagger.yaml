basePath: /api/v1
definitions:
  request.CreateUser:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: secretpassword123
        type: string
    required:
    - email
    - name
    - password
    type: object
  request.UpdateUser:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: newpassword123
        type: string
    required:
    - email
    - name
    type: object
  response.DeleteUser:
    properties:
      message:
        example: user deleted successfully
        type: string
    type: object
  response.User:
    properties:
      created_at:
        example: "2024-03-24T15:04:05Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      updated_at:
        example: "2024-03-24T15:04:05Z"
        type: string
    type: object
  response.UserErrorBadRequest:
    properties:
      code:
        example: 400
        type: integer
      error:
        example: User ID must be a positive integer
        type: string
      message:
        example: invalid id for user
        type: string
    type: object
  response.UserErrorConflict:
    properties:
      code:
        example: 409
        type: integer
      error:
        example: User with email already exists
        type: string
      message:
        example: user already exists
        type: string
    type: object
  response.UserErrorInternalServer:
    properties:
      code:
        example: 500
        type: integer
      error:
        example: Internal server error
        type: string
      message:
        example: failed to create user
        type: string
    type: object
  response.UserErrorNotFound:
    properties:
      code:
        example: 404
        type: integer
      error:
        example: User with ID 1 not found
        type: string
      message:
        example: user not found
        type: string
    type: object
  response.UserList:
    properties:
      users:
        items:
          $ref: '#/definitions/response.User'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A RESTful API for different apps
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Template API
  version: 1.0.0
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Get all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.UserErrorInternalServer'
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided input
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.UserErrorBadRequest'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.UserErrorConflict'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.UserErrorInternalServer'
      summary: Create a new user
      tags:
      - Users API
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/response.DeleteUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.UserErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.UserErrorNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.UserErrorInternalServer'
      summary: Delete a user
      tags:
      - Users API
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.UserErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.UserErrorNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.UserErrorInternalServer'
      summary: Get a user by ID
      tags:
      - Users API
    put:
      consumes:
      - application/json
      description: Update a user's information by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.UserErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.UserErrorNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.UserErrorInternalServer'
      summary: Update a user
      tags:
      - Users API
swagger: "2.0"
